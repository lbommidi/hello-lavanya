JS Fundamentals
----------------

Primitive Values
----------------
5, 'Capgemini', false, undefined, null

5 Primitive Types
-----------------
Number,String, Boolean, undefined & null

var str = 'Capgemini';
typeof(str);

=== (strict comparison operator)
4 == '4' returns true //JS is loosely typed
4 === '4' returns false

All JS types derived from Object Type

Object (Associative Arrays : key - value pair)
----------------------------------------------
var employee = {};
employee.id = 714709; //Mostly used
(or)
employee['id'] = 714709; 

employee.id
or
employee['id']

delete employee['id']

Arrays
------
var numbers = [];
numbers.push(4);
numbers.push(8);
numbers.push(12);
numbers.push(16);


numbers.length;

numbers.pop(); //remove 16

numbers.indexOf(8); //returns 1

[4,8,12]
numbers.splice(numbers.indexOf(8),1);




Text format
------------
Id,Name
1,Karthik
2,Rajesh

XML
---
<Employees>
	<Employee companyName="Capgemini">
		<Id>1</Id>
		<Name>Karthik</Name>
		<Address>
			<DoorNo>3</DoorNo>
			<City>Bangalore</City>
		</Address>
		<Hobbies>
			<Hobby>Programming</Hobby>
			<Hobby>Music</Hobby>
		</Hobbies>
	</Employee>
	<Employee>
		<Id>2</Id>
		<Name>Rajesh</Name>
	</Employee>
</Employees>

JSON
-----
var employee = {
	id:100831,
	name:'Karthik',
	location:{
		city:'Bangalore',
		state:'Karnataka'
	},
	hobbies:['Programming','Music'],
	activeStatus:true
};

var employees = [{
	id:100831,
	name:'Karthik',
	location:{
		city:'Bangalore',
		state:'Karnataka'
	},
	hobbies:['Programming','Music'],
	activeStatus:true
},
{id:100832,name:'Rajesh',location:{	state:'Karnataka',	place:'Mysore'},activeStatus:true,	skillSets:['C','C++']}
];

employees[1].location.city


Data is our tool

Operations
----------
Create
Read
Update
Delete



NoSQL : NOT Only SQL (NO SQL in NOSQL)

Non-relational Database management system, which is very different from RDBMS


Huge Volumes of Data Un-structured, semi-structured, un-predictable - Big Data
Blogs,Facebook, Google, Twitter, youtube

RDBMS is designed to Maintain Structured Data(upto certain limit)


NoSQL Features
--------------
Stores large volumes of structured-semi-structured and unstructured data
High performance, High Scalability,and High Availability
Quick Iteration
Object-oriented programming that is easy to use and flexible
Dynamic Schemas

Auto-Sharding (Scaleup)
Replication 

NoSQL Databases
---------------
Key-Value Stores : Redis, Dynamo, Riak
Column-oriented : BigTable, Cassandra, Simple DB, HBase
Graph : OrientDB, Neo4j, Titan
Document-oriented : MongoDB, CouchDB



MongoDB is a cross-platform open-source, document orient database that provides, high performance, high availability, automatic and easy scalibility 


document advantages
-------------------
Documents (objects) correspond to native datatypes in many programming languages.
Embedded documents and arrays reduce the need for expensive joins
Ability to perform dynamic queries on documents using document based query language

Conversion of objects to database objects is not needed
High-performance  - uses internal memory to store working set for quick data access
   

   Employee	Depart      Hobbies      EmployeeHobbies
     EID(PK)  DID (PK)   HobbyId(PK)    EID(FK)
	 EName    DName      HobbyName      HId (FK)
	 DID(FK)
	 
	 
	 {
		id:1,
		Name:'Karthik'
		Department:{
			DepartmentId:101,
			DepartmentName:'L&D'
		},
		Hobbies:['Programming','Music']
	 }

	 
	 Named Function
---------------
function add(a,b){
	return a + b;
}
//Invoking the function
add(45,5);

var add = function(a,b){
	return a + b;
}
//Invoking the function explicitly
add(45,5);

Self Invoking Anonymous Function
---------------------------------
(function(name){
  console.log('Hi '+name);
})('Karthik');

(function(a,b){
  return a + b;
})(5,6);

Nested Function
================
function add(a){
  return function(b){
      return a + b;
  };
}

add(5)(6)

Scope of the variable
---------------------
function sample(){
   var local = 5; // local cannot access after function exits
   global = 10; //attached to the global scope(window)
}


Constructor Function (Pascalcase)
==================================
	
function Employee(id,name){
	this.id = id;
	this.name = name;
}

var emp1 = new Employee(1,"Ravi");
var emp2 = new Employee(2,"Ram");

CallbackFunction
----------------

var numbers = [1,2,3,4,5];

for(var counter=0;counter<numbers.length;counter++){
	console.log(numbers[counter])
}

var numbers = [1,2,3,4,5];
numbers.forEach(function(number){
   console.log(number);
});

var numbers = [3,7,1,6,10,100,43];

numbers.sort();
[1, 10, 100, 3, 43, 6, 7]

numbers.sort(function(a,b){
   return a > b;
});
[1, 3, 6, 7, 10, 43, 100]

numbers.sort(function(a,b){
   return a < b;
});
[100, 43, 10, 7, 6, 3, 1]


var numbers = [1,2,3,4,5];

numbers.map(function(number){
   return number * 5;
});
[5, 10, 15, 20, 25]

var numbers = [1,2,3,4,5];

numbers.reduce(function(total,number){
   return total= total + number;
},0);

